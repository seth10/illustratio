{"version":3,"sources":["pages/HomePage/HomePage.js","pages/ArtworkPage/ArtworkPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","state","handleRandom","_this","props","mongodb","db","collection","aggregate","$sample","size","asArray","then","data","history","push","id","_this2","this","react_default","a","createElement","className","Jumbotron","Panel","Body","isAuthed","Fragment","Button","onClick","Form","FormGroup","controlId","Col","componentClass","ControlLabel","FormControl","type","placeholder","inputRef","input","formEmail","formPass","bsStyle","handleEmailLogin","value","handleAnonLogin","Component","ArtworkPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","favorited","handleFavorite","event","updateOne","match","params","$pull","user_likes","client","auth","user","setState","target","checked","find","indexOf","typeWords","map","word","toLowerCase","keyword","$in","data2","typeFlavor","description","role","name","artists","notes","disabled","site","address","endsWith","images","data-toggle","data-target","aria-expanded","aria-controls","src","alt","htmlFor","aria-label","onChange","APP_ID","App","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loginWithCredential","AnonymousCredential","authMethod","stop","_ref2","_callee2","email","password","_context2","UserPasswordCredential","console","log","_x","_x2","apply","arguments","appId","Stitch","hasAppClient","defaultAppClient","initializeDefaultAppClient","getServiceClient","RemoteMongoClient","factory","BrowserRouter","Switch","Route","exact","path","render","pages_HomePage_HomePage","assign","pages_ArtworkPage_ArtworkPage","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef91438f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Jumbotron, Form, FormGroup, FormControl, ControlLabel, Col, Button, Panel } from 'react-bootstrap'\nimport './HomePage.css'\n\nclass HomePage extends Component {\n    state = {}\n    handleRandom = () => {\n        this.props.mongodb.db('illustratio').collection('artwork').aggregate([{ $sample: { size: 1 } }]).asArray().then(data => {\n            this.props.history.push('/artwork/'+data[0].id)\n        })\n    }\n    render() {\n        return (\n            <div className=\"col-12 pt-4 pb-4\">\n                <Jumbotron>\n                    <h1>illustratio</h1>\n                    <p>Experience cultural enlightenment in Baltimore</p>\n                </Jumbotron>\n                <Panel>\n                    <Panel.Body><em>illustratio</em> is an app that informs you of artwork around Baltimore and provides fact about the medium of art.</Panel.Body>\n                </Panel>\n                \n                <hr />\n                \n                {!this.props.isAuthed ? (\n                <React.Fragment>\n                    <p>Login to keep track of your patronage:</p>\n                    <Form>\n                        <FormGroup controlId=\"formEmail\">\n                            <Col componentClass={ControlLabel}>\n                                Email\n                            </Col>\n                            <Col>\n                                <FormControl type=\"email\" placeholder=\"hack3r@gmail.com\" inputRef={input => this.formEmail = input} />\n                            </Col>\n                        </FormGroup>\n\n                        <FormGroup controlId=\"formPass\">\n                            <Col componentClass={ControlLabel}>\n                                Password\n                            </Col>\n                            <Col>\n                                <FormControl type=\"password\" placeholder=\"hunter2\" inputRef={input => this.formPass = input} />\n                            </Col>\n                        </FormGroup>\n\n                        <FormGroup>\n                            <Col>\n                                <Button bsStyle=\"primary\" onClick={() => this.props.handleEmailLogin(this.formEmail.value, this.formPass.value)}>Login</Button>\n                            </Col>\n                        </FormGroup>\n                    </Form>\n\n                    <hr />\n\n                    <p>Or, begin without logging in:</p>\n                    <Button bsStyle=\"warning\" onClick={this.props.handleAnonLogin}>Continue without login</Button>\n                </React.Fragment>\n                ) : (\n                <React.Fragment>\n                    <p><Button onClick={this.handleRandom}>Show me art (random)</Button></p>\n                    <p><Button>Last session</Button></p>\n                    <p><Button>My favorites</Button></p>\n                </React.Fragment>\n                )}\n                <div id=\"scrollingBackground\"></div>\n            </div>\n        )\n    }\n}\n\nexport default HomePage\n","import React, { Component } from 'react'\nimport './ArtworkPage.css'\n\nclass ArtworkPage extends Component {\n    state = {favorited: false}\n    constructor(props) {\n        super(props)\n\n        this.props.mongodb.db('illustratio').collection('artwork').find({ 'id': this.props.match.params.id }).asArray().then(data => {\n            this.setState({ data: data[0] })\n            if (data[0].user_likes) {\n                //let likes = data[0].likes.map(like => Array.from(like.id).map(b => b.toString(16).padStart(2, \"0\")).join(\"\"))\n                this.setState({ favorited: data[0].user_likes.indexOf(this.props.client.auth.user.id)>=0 })\n            }\n            if (data[0].data.type) {\n                //let types = data[0].data.type.match(/\\w+/g).map(String.prototype.toLowerCase)\n                let typeWords = data[0].data.type.match(/\\w+/g).map(word => word.toLowerCase())\n                this.props.mongodb.db('illustratio').collection('materials').find({ 'keyword': {$in: typeWords} }).asArray().then(data2 => {\n                    data2[0] && this.setState({ typeFlavor: data2[0].description })\n                });\n            }\n        })\n    }\n    handleFavorite = event => {\n        this.props.mongodb.db('illustratio').collection('artwork').updateOne({ 'id': this.props.match.params.id }, { $pull: {user_likes: this.props.client.auth.user.id} })\n        this.setState({ favorited: event.target.checked })\n    }\n    render() {\n        if (!this.state.data) return ( <div></div> )\n        return (\n            <main role=\"main\" className=\"container\">\n                <h1 className=\"mt-5\">{this.state.data.data.name || 'Untitled'}</h1>\n                <p className=\"lead\">{this.state.data.data.artists[0] || 'Unattributed'}</p>\n\n                {this.state.data.data.notes ? (\n                <div className=\"input-group fake-input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Notes</span>\n                    </div>\n                    <input type=\"text\" className=\"form-control\" value={this.state.data.data.notes} disabled />\n                </div>\n                ) : null}\n                {this.state.data.data.site ? (\n                <div className=\"input-group fake-input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Site</span>\n                    </div>\n                    <input type=\"text\" className=\"form-control\" value={this.state.data.data.site} disabled />\n                </div>\n                ) : null}\n                {this.state.data.data.address && !this.state.data.data.address.endsWith('000Z') ? (\n                <div className=\"input-group fake-input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Address</span>\n                    </div>\n                    <input type=\"text\" className=\"form-control\" value={this.state.data.data.address} disabled />\n                </div>\n                ) : null}\n                {this.state.data.data.type ? (\n                    this.state.typeFlavor ? (\n                    <div className=\"card\">\n                        <div className=\"input-group fake-input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Type</span>\n                            </div>\n                            <input type=\"text\" className=\"form-control\" value={this.state.data.data.type} disabled />\n                        </div>\n                        <p className=\"card-body\">{this.state.typeFlavor}</p>\n                    </div>\n                    ) : (\n                    <div className=\"input-group fake-input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">Type</span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" value={this.state.data.data.type} disabled />\n                    </div>\n                    )\n                ) : null}\n\n                {this.state.data.data.images ? (\n                <React.Fragment>\n                <button className=\"btn btn-secondary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#imageSpoiler\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n                      Image <span className=\"badge badge-danger\">Spoiler</span>\n                </button>\n                <div className=\"collapse mt-1\" id=\"imageSpoiler\">\n                    <img className=\"img-fluid\" src={this.state.data.data.images[0]} alt=\"\" />\n                </div>\n                </React.Fragment>\n                ) : null}\n\n                <hr />\n\n                <p><button className=\"btn btn-primary btn-lg btn-block\" type=\"button\" data-toggle=\"collapse\" data-target=\"#visited\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\n                      I Visited This!\n                </button></p>\n                <div className=\"collapse\" id=\"visited\">\n                    <label htmlFor=\"my-notes\">My Notes</label>\n                    <textarea id=\"my-notes\" className=\"form-control\" aria-label=\"With textarea\"></textarea>\n                </div>\n\n                <hr />\n                {/*<button className=\"btn btn-danger btn-block\" type=\"button\" data-target=\"#favorited\" aria-controls=\"collapseExample\">\n                      I Love This!\n                </button>*/}\n                {/*<div className=\"btn-group-toggle\" data-toggle=\"buttons\">\n                    <label className=\"btn btn-danger btn-block\">\n                    <input type=\"checkbox\" autoComplete=\"off\" checked={this.state.favorited || false} onChange={this.handleFavorite} />I Love This!\n                    </label>\n                </div>*/}\n                <input type=\"checkbox\" checked={this.state.favorited} onChange={this.handleFavorite} /> I Love This!\n            </main>\n        )\n    }\n}\n\nexport default ArtworkPage\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport {\n    Stitch,\n    AnonymousCredential,\n    UserPasswordCredential,\n    RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk'\nimport HomePage from './pages/HomePage'\nimport ArtworkPage from './pages/ArtworkPage'\n//import Nav from './components/Nav'\nimport './App.css'\n\nconst APP_ID = 'illustratio-vdzkt'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { isAuthed: false }\n\n        this.appId = APP_ID\n        if (!Stitch.hasAppClient(this.appId)) {\n            this.client = Stitch.initializeDefaultAppClient(this.appId)\n        } else {\n            this.client = Stitch.defaultAppClient\n        }\n\n        this.mongodb = this.client.getServiceClient(\n            RemoteMongoClient.factory,\n            'mongodb-atlas'\n        )\n    }\n\n    handleAnonLogin = async () => {\n        await this.client.auth.loginWithCredential(new AnonymousCredential())\n        this.setState({ isAuthed: true, authMethod: 'anon' })\n    }\n    handleEmailLogin = async (email, password) => {\n        await this.client.auth.loginWithCredential(new UserPasswordCredential(email, password))\n        this.setState({ isAuthed: true, authMethod: 'email' })\n        //this.mongodb.db('illustratio').collection('users').find({'user_id': this.client.auth.user.id}).asArray().then(data => {\n        //    console.log(data)\n        //})\n        console.log(this.client.auth.user.id)\n        //this.mongodb.db('illustratio').collection('users').insertOne({\"fdas\": \"asdf\", 'user_id': this.client.auth.user.id })\n    }\n\n    render() {\n        return (\n            <Router>\n                <React.Fragment>\n                    {/*<Nav />*/}\n                    <Switch>\n                        <Route\n                            exact path=\"/\"\n                            render={props => <HomePage\n                                                isAuthed={this.state.isAuthed} authMethod={this.state.authMethod} mongodb={this.mongodb}\n                                                handleAnonLogin={this.handleAnonLogin} handleEmailLogin={this.handleEmailLogin}\n                                                {...props}\n                                             />\n                            }\n                        />\n                        <Route\n                            exact path=\"/artwork/:id\"\n                            render={props => <ArtworkPage isAuthed={this.state.isAuthed} mongodb={this.mongodb} client={this.client} {...props} />}\n                        />\n                    </Switch>\n                </React.Fragment>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n//import 'bootstrap/dist/css/bootstrap-theme.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}